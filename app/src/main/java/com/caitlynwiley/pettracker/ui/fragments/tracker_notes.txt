val randomStringGenerator: RandomStringGenerator =
     RandomStringGenerator.Builder().withinRange(charArrayOf('0', '9'), charArrayOf('a', 'z'),
         charArrayOf('A', 'Z')).build()


// setup swipe-to-delete and undo logic
val itemTouchHelper = ItemTouchHelper(SwipeToDeleteHelper(mAdapter, requireContext()))
itemTouchHelper.attachToRecyclerView(recyclerView)


    /*
    Positive btn: "Save"
    onClick (pseudocode):
        // type
        val num1 = peeCheckBox.isChecked
        val num2 = poopCheckBox.isChecked
        //date
        val c = Calendar.getInstance()
        val date = String.format(
            Locale.US, "%02d/%02d/%4d",
            c[Calendar.MONTH] + 1, c[Calendar.DAY_OF_MONTH],
            c[Calendar.YEAR]
        )
        if (mAdapter.mostRecentDate != date) {
            addDayToList(c, viewModel.pet.value?.id ?: "")
        }
        val e = TrackerItem.Builder()
            .setEventType(TrackerItem.EventType.POTTY)
            .setMillis(System.currentTimeMillis())
            .setNumber1(num1)
            .setNumber2(num2)
            .setPetId(viewModel.pet.value?.id ?: "")
            .setItemType("event")
            .setId(randomStringGenerator.generate(30))
            .build()
        viewModel.addTrackerItem(e)

    Negative btn: "Cancel"
    onClick: dialog.cancel()
     */

    /*
    Positive btn: "Save"
    onClick (pseudocode):
        val hours = hoursTextField.getValue
        val mins = minutesTextField.getValue
        //date
        val c = Calendar.getInstance()
        val date = String.format(
            Locale.US, "%02d/%02d/%4d",
            c[Calendar.MONTH] + 1, c[Calendar.DAY_OF_MONTH],
            c[Calendar.YEAR]
        )
        if (mAdapter.mostRecentDate != date) {
            addDayToList(c, viewModel.pet.value?.id ?: "")
        }
        val e = TrackerItem.Builder()
            .setEventType(TrackerItem.EventType.WALK)
            .setMillis(System.currentTimeMillis())
            .setWalkLength(hours, mins)
            .setPetId(viewModel.pet.value?.id ?: "")
            .setItemType("event")
            .setId(randomStringGenerator.generate(30))
            .build()
        viewModel.addTrackerItem(e)

    Negative btn: "Cancel"
    onClick: dialog.cancel()
     */

    /*
    Positive btn: "Save"
    onClick (pseudocode):
        if (cups.isEmpty() || cups.getValue == "0") {
            // stay open and show error message
        } else {
            // amount
            val cupsFood = cups.getValue
            //date
            val c = Calendar.getInstance()
            val date = String.format(
                Locale.US, "%02d/%02d/%4d",
                c[Calendar.MONTH] + 1, c[Calendar.DAY_OF_MONTH],
                c[Calendar.YEAR]
            )
            if (mAdapter.mostRecentDate != date) {
                addDayToList(c, viewModel.pet.value?.id ?: "")
            }
            val e = TrackerItem.Builder()
                .setEventType(TrackerItem.EventType.FEED)
                .setMillis(System.currentTimeMillis())
                .setCupsFood(cupsFood)
                .setPetId(viewModel.pet.value?.id ?: "")
                .setItemType("event")
                .setId(randomStringGenerator.generate(30))
                .build()
            viewModel.addTrackerItem(e)
        }

    Negative btn: "Cancel"
    onClick: dialog.cancel()
     */

fun addDayToList(c: Calendar, petId: String) {
    val day = TrackerItem.Builder()
        .setMillis(System.currentTimeMillis())
        .setItemType("day")
        .setPetId(petId)
        .setId(randomStringGenerator.generate(30))
        .build()
    val now = System.currentTimeMillis()
    c.timeInMillis = now
    c[Calendar.HOUR] = 0
    c[Calendar.MINUTE] = 0
    c[Calendar.SECOND] = 0
    c[Calendar.MILLISECOND] = 0
    c.add(Calendar.MILLISECOND, viewModel.gmtTimeZone.getOffset(now))
    day.setUtcMillis(c.timeInMillis)
    viewModel.addTrackerItem(day)
}